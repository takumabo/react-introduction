今回はチャットを表示する関数コンポーネントを作ります。

かなり大きな作業になるけど頑張ろ。

前回は最初の答えを出すところまでしました。
今回は

```
1. チャットの質問と適切な答えの文章を出す(前回の復習)
2. 答えの選択によってチャット文章を表示する
3. 質問と答えの場所を逆にする(質問が右側 / 答えが左側)
```

の３つを攻略します。

まずは1. のチャット文章を出すところからはじめます。

App.jsxを以下のように変えましょう。

```
// App.jsx

import React from 'react';
import defaultDataset from './dataset';
import './assets/styles/style.css';

import { Answers,Chats } from './components/index';

export default class App extends React.Component {
  constructor(props){
    super(props);

    this.state = {
      answers:[],
      chats:[],
      currentId:"init",
      dataset: defaultDataset,
      open:false
    }

    this.selectAnswer = this.selectAnswer.bind(this);
  }

  displayNextQuestion = (nextQuestionId) =>{
    const chats = this.state.chats;
    chats.push({
      text:this.state.dataset[nextQuestionId].question,
      type: 'question'
    })

    this.setState({
      answers: this.state.dataset[nextQuestionId].answers,
      chats:chats,
      currentId: nextQuestionId
    })
  }


  selectAnswer = (selectedAnswer,nextQuestionId) => {
    switch(true){
      case(nextQuestionId === "init"):
        this.displayNextQuestion(nextQuestionId)
        break;
      default:
        const chats = this.state.chats;
        chats.push({
          text: selectedAnswer,
          type: 'answer'
        });
    
        this.setState({
          chats: chats
        })

        this.displayNextQuestion(nextQuestionId)
        break;

    }
  }

  componentDidMount(){
    const initAnswer ="";
    this.selectAnswer(initAnswer,this.state.currentId)
  }

  render(){
    return (
      <section className="c-section">
        <div className="c-box">
          <Chats chats={this.state.chats} />
          <Answers answers={this.state.answers} select={this.selectAnswer} />
        </div>
      </section>
  );
}
}

```

Chatsコンポーネントを作成し、チャットの値を{this.state.chats}で子に渡せるようにしましょう。
答えが洗濯して次の質問文が出るようにしたいのでselectAnswer()を作成します。
選択する度にこの関数が動くようにしたいので、引数にはselectedAnswerとnextquestionIdを与えます。
出力のパターンは①init時(アプリ起動時) / ② 回答選択時　に分かれるので、switch文を作ります。
ここから表示するパターンの関数は作りました。次に選択後の質問を表示するための関数を作ります。

displayNextQuestion()関数を生成します。const chats = this.state.chatsで現在のchatsを取得し、
そのchatsにpush()メソッドでtext:;とtype:;を入れます。こうすることで、画面には最初の質問→(その答え)→次の質問
といった内容が表示されます。次の質問が表示されるとその質問の回答も同じく表示して欲しいので、this.setState({})で
answersとchatsとcurrentIdを設定します。

最後にcomponenDidMount()は最初のレンダー一回きりの動作なので、initAnswerは答えていない状態
this.selectAnswer(initAnswer,this,state,currentId)を付与することで最初の画面を表示させる。

最後のselectAnswerはbindしましょう。こうすることでレンダーたびの関数呼び出しを防ぐことができるのでパフォーマンスが向上します。

Chats.jsxは以下の通り
```
import React from 'react';
import '../assets/styles/index.css'
import { Chat } from './index';

import { makeStyles } from '@material-ui/core/styles';
import List from '@material-ui/core/List';


const useStyles = makeStyles((theme) => ({
    root: {
      width: '100%',
      maxWidth: '36ch',
      backgroundColor: theme.palette.background.paper,
    },
  }));

const Chats = (props) =>{
    const classes = useStyles();

return (
  <List className={classes.root}>
      {props.chats.map((value,index)=>{
          return <Chat text={value.text} type={value.type} key={index.toString()} />
      })}
  </List>  
)
}
export default Chats
```

Chat.jsは以下の通り。
```
import React from 'react';
import '../assets/styles/index.css';
import ListItem from '@material-ui/core/ListItem';
import ListItemAvatar from '@material-ui/core/ListItemAvatar';
import Avatar from '@material-ui/core/Avatar';
import noProfile from '../assets/imgs/noProfile.jpg';
import djc from '../assets/imgs/djc.png';

const Chat = (props) =>{

    const isQuestion = (props.type === 'question');

    const classes = isQuestion ? 'p-chat__row' : 'p-chat__reverse'; 


    return (
        <ListItem className={classes}>
        <ListItemAvatar>
            {isQuestion ? (
                <Avatar alt="Icon" src={djc} />
            ):(
                <Avatar alt="Icon" src={noProfile} />
            )}
        </ListItemAvatar>
        <div className="p-chat__bubble">
            {props.text}
        </div>
        </ListItem>
    )
}
export default Chat;
```

```
{isQuestion ? (
                <Avatar alt="Icon" src={djc} />
            ):(
                <Avatar alt="Icon" src={noProfile} />
)}
```

この部分は参考演算子を使って処理を記述しています。
Questionがtrueであれば弊社写真をfalseであればクライアント写真を添付しています。






